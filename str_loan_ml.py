# -*- coding: utf-8 -*-
"""Str_Loan_ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17atSkGT_nJXcdqb_ep0hkz7yxWTo-ycN

# Loan Prediction using Machine Learning

### In this project, we will predict whether a customer will get the loan from bank or not.
"""

import pandas as pd
import numpy as np
import seaborn as sns



train=pd.read_csv('train.csv')
train.Loan_Status=train.Loan_Status.map({'Y':1,'N':0})
train.head()

"""Data Visualization"""

sns.countplot(x='Education',hue='Loan_Status',data=train)

sns.countplot(x='Married',hue='Loan_Status',data=train)

sns.countplot(x='Credit_History',hue='Loan_Status',data=train)

"""## Check the missing Values in data"""

train.isnull().sum()

"""## Preprocessing on the data"""

Loan_status=train.Loan_Status
train.drop('Loan_Status',axis=1,inplace=True)
test=pd.read_csv('test.csv')
Loan_ID=test.Loan_ID
data=train._append(test)
data.head()

data.shape

data.describe()

data.isnull().sum()

"""## Label ENcode"""

## Label encoding for gender
data.Gender=data.Gender.map({'Male':1,'Female':0})
data.Gender.value_counts()

## Labelling 0 & 1 for Marrital status
data.Married=data.Married.map({'Yes':1,'No':0})

data.Married.value_counts()

## Labelling 0 & 1 for Dependents
data.Dependents=data.Dependents.map({'0':0,'1':1,'2':2,'3+':3})

data.Dependents.value_counts()

## Labelling 0 & 1 for Education Status
data.Education=data.Education.map({'Graduate':1,'Not Graduate':0})

data.Education.value_counts()

## Labelling 0 & 1 for Employment status
data.Self_Employed=data.Self_Employed.map({'Yes':1,'No':0})

data.Self_Employed.value_counts()

data.Property_Area.value_counts()

## Labelling 0 & 1 for Property area
data.Property_Area=data.Property_Area.map({'Urban':2,'Rural':0,'Semiurban':1})

data.Property_Area.value_counts()

data.head()

data.Credit_History.size

"""## It's time to fill the missing values"""

data.Credit_History.fillna(np.random.randint(0,2),inplace=True)

data.isnull().sum()

data.Married.fillna(np.random.randint(0,2),inplace=True)

data.isnull().sum()

## Filling with median
data.LoanAmount.fillna(data.LoanAmount.median(),inplace=True)

## Filling with mean
data.Loan_Amount_Term.fillna(data.Loan_Amount_Term.mean(),inplace=True)

data.isnull().sum()

data.Gender.value_counts()

## Filling Gender with random number between 0-2
from random import randint
data.Gender.fillna(np.random.randint(0,2),inplace=True)

data.Gender.value_counts()

## Filling Dependents with median
data.Dependents.fillna(data.Dependents.median(),inplace=True)

data.isnull().sum()

data.Self_Employed.fillna(np.random.randint(0,2),inplace=True)

data.isnull().sum()

data.head()

## Dropping Loan ID from data, it's not useful
data.drop('Loan_ID',inplace=True,axis=1)

data.isnull().sum()

train.shape

"""## Split the Data into X & Y"""

train_X=data.iloc[:614,] ## all the data in X (Train set)
train_y=Loan_status  ## Loan status will be our Y

from sklearn.model_selection import train_test_split
train_X,test_X,train_y,test_y=train_test_split(train_X,train_y, test_size = 0.1, random_state=0)

#sc_f = ['ApplicantIncome','CoapplicantIncome','LoanAmount','Loan_Amount_Term']
#sc_f = ['ApplicantIncome','CoapplicantIncome','LoanAmount']
train_X.head()

test_X.head()

"""## Using Different types of Machine Learning Model"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier

"""## Fit the all ML Models"""

models=[]
models.append(("Logistic Regression",LogisticRegression()))
models.append(("Decision Tree",DecisionTreeClassifier()))
models.append(("Linear Discriminant Analysis",LinearDiscriminantAnalysis()))
models.append(("Random Forest",RandomForestClassifier()))
models.append(("Support Vector Classifier",SVC()))
models.append(("K- Neirest Neighbour",KNeighborsClassifier()))
models.append(("Naive Bayes",GaussianNB()))

scoring='accuracy'

from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
result=[]
names=[]

for name,model in models:
    kfold=KFold(n_splits=10,random_state=0, shuffle = True)
    cv_result=cross_val_score(model,train_X,train_y,cv=kfold,scoring=scoring)
    result.append(cv_result)
    names.append(name)
    print(model)
    print("%s %f" % (name,cv_result.mean()))

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

LR=LogisticRegression()
LR.fit(train_X,train_y)
pred=LR.predict(test_X)
print("Model Accuracy:- ",accuracy_score(test_y,pred))

print(pred)

X_test=data.iloc[614:,]
# X_test[sc_f]=SC.fit_transform(X_test[sc_f])

X_test.head()

prediction = LR.predict(X_test)

print(prediction)

## TAken data from the dataset
''' t = LR.predict([[1.0,	1.0,	0.0,	0,	0.0,	15000,	0.0,	15000.0,	360.0,	1.0,	2]]) '''

''' print (t) '''

"""Model Making"""

df = pd.DataFrame({
    'Gender':1.0,
    'Married':1.0,
    'Dependents':0.0,
    'Education':1,
    'Self_Employed':0,
    'ApplicantIncome':15000,
    'CoapplicantIncome':0.0,
    'LoanAmount':50000,
    'Loan_Amount_Term':60,
    'Credit_History':1,
    'Property_Area':1
},index=[0])
#print(df)

result = LR.predict(df)
if result==1:
    print("\n\nLoan Approved")
else:
    print("\n\nLoan Not Approved")

import pickle
file = 'ML_Model1'
fileobj = open(file,'wb')

pickle.dump(LR,fileobj)
fileobj.close()

fileobj = open(file,'rb')
model = pickle.load(fileobj)

import pandas as pd
df = pd.DataFrame({
    'Gender':1,
    'Married':1,
    'Dependents':0,
    'Education':1,
    'Self_Employed':0,
    'ApplicantIncome':26000,
    'CoapplicantIncome':0.0,
    'LoanAmount':1100.0,
    'Loan_Amount_Term':36.0,
    'Credit_History':1.0,
    'Property_Area':1
},index=[0])

df

result = model.predict(df)

if result==1:
    print("\n\nLoan Approved")
else:
    print("\n\nLoan Not Approved")

